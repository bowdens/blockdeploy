pragma solidity ^0.4.24;

contract MedToken {
    // the address of the owner of the contract
    address     administrator;

    mapping(address => bool) pharmacies;
    mapping(address => bool) doctors;
    mapping(uint256 => Prescription) prescriptions;
    uint256 prescriptionCount;

    mapping(uint256 => uint256) prescriptionPatient;
    mapping(uint256 => address) prescriptionPharmacy;


    /*
     * The prescription struct provides uint256 of each field
     * This allows the keccak hash to be inserted
     * The keccak hash should be generated by keccak(string + secretKey)
     */

    struct Prescription {
        string drug;
        string quantity;
        string patient;
        string deliveryAddress;
        uint256 patientId;
        uint256 id;
        bool fufilled;
    }


    constructor() public {
        administrator = msg.sender;
    }

    // Doctor creates a token
    function createPrescription(string drug, string quantity, string patient, string deliveryAddress, uint256 patientId, address pharmacy) public returns (uint256 prescriptionID) {
        require(doctors[msg.sender] == true);
        require(pharmacies[pharmacy] == true);

        // check against buffer overflow
        require(prescriptionCount+1 > prescriptionCount);

        prescriptions[prescriptionCount] = Prescription(drug, quantity, deliveryAddress, patient, patientId, prescriptionCount, false);
        prescriptionPharmacy[prescriptionCount] = pharmacy;
        prescriptionPatient[prescriptionCount] = patientId;

        prescriptionCount += 1;
        return prescriptionCount-1;
    }

    function addDoctor(address doctor) public {
        require(msg.sender == administrator);
        doctors[doctor] = true;
    }

    function removeDoctor(address doctor) public {
        require(msg.sender == administrator);
        doctors[doctor] = false;
    }

    function addPharmacy(address pharmacy) public {
        require(msg.sender == administrator);
        pharmacies[pharmacy] = true;
    }

    function removePharmacy(address pharmacy) public {
        require(msg.sender == administrator);
        pharmacies[pharmacy] = true;
    }

    function changeAdmin(address newAdmin) public {
        require(msg.sender == administrator);
        administrator = newAdmin;
    }

    // Fufill token
    function fufillPrescription(uint256 id) public view {
        require(id < prescriptionCount);
        Prescription memory p = prescriptions[id];
        require(p.fufilled == false);
        require(prescriptionPharmacy[id] == msg.sender);

        p.fufilled = true;
    }

    function isFufilled(uint256 id) public view returns (bool) {
        require(id < prescriptionCount);
        return prescriptions[id].fufilled;
    }

    function viewPrescription(uint256 patientId, uint256 id) public view returns (string drug, string quantity, string patient, string deliveryAddress) {
        // if time permitted, we would need to add privacy features - for now leave it as open to anyone
        require(id < prescriptionCount);
        Prescription memory p = prescriptions[id];
        require(p.id == patientId);
        return (p.drug, p.quantity, p.patient, p.deliveryAddress);
    }
}

